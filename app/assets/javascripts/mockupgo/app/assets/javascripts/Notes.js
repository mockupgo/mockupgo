//@ sourceMappingURL=mockupgo\app\assets\javascripts\mockupgo\app\assets\javascripts\Notes.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Notes, _,
    _this = this;

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    _ = require('lodash');
  } else {
    _ = window._;
  }

  Notes = (function() {

    function Notes(viewModel, pusher, server) {
      var _this = this;
      this.viewModel = viewModel;
      this.pusher = pusher;
      this.server = server;
      this.commitDelete = function(id) {
        return Notes.prototype.commitDelete.apply(_this, arguments);
      };
      this["delete"] = function(id) {
        return Notes.prototype.delete.apply(_this, arguments);
      };
      this.commitUpdate = function(note) {
        return Notes.prototype.commitUpdate.apply(_this, arguments);
      };
      this.updatePos = function(note) {
        return Notes.prototype.updatePos.apply(_this, arguments);
      };
      this.updateSize = function(note) {
        return Notes.prototype.updateSize.apply(_this, arguments);
      };
      this.commitCreate = function(note) {
        return Notes.prototype.commitCreate.apply(_this, arguments);
      };
      this.create = function(note) {
        return Notes.prototype.create.apply(_this, arguments);
      };
      this.push = function(note) {
        return Notes.prototype.push.apply(_this, arguments);
      };
      this.pop = function(id) {
        return Notes.prototype.pop.apply(_this, arguments);
      };
      this.subscribe = function() {
        return Notes.prototype.subscribe.apply(_this, arguments);
      };
      this.get = function(id) {
        return Notes.prototype.get.apply(_this, arguments);
      };
      this.init = function() {
        return Notes.prototype.init.apply(_this, arguments);
      };
      this.data = {};
      this.count = 0;
      this.init();
    }

    Notes.prototype.init = function() {
      var _this = this;
      return this.server.getNotes(function(notes) {
        _.forEach(notes, function(note) {
          var newNote;
          newNote = _.cloneDeep(note);
          newNote.oldId = newNote.id;
          return _this.push(newNote);
        });
        return _this.subscribe();
      });
    };

    Notes.prototype.get = function(id) {
      return this.data[id];
    };

    Notes.prototype.subscribe = function() {
      var _this = this;
      this.pusher.subscribe("client-new-note-in-progress", function(note) {
        if (note.width < 4 && note.height < 4) {
          return _this["delete"](note.id);
        } else {
          return _this.push(note);
        }
      });
      this.pusher.subscribe("create-note", function(note) {
        _this.pop(note.oldId);
        return _this.push(note);
      });
      this.pusher.subscribe("client-update-note-size", function(note) {
        return _this.push(note);
      });
      this.pusher.subscribe("client-update-note-position", function(note) {
        return _this.push(note);
      });
      this.pusher.subscribe("update-note", function(note) {
        return _this.push(note);
      });
      return this.pusher.subscribe("client-delete-note-in-progress", function(note) {
        return _this.pop(note.id);
      });
    };

    Notes.prototype.pop = function(id) {
      if (this.data[id] != null) {
        this.count--;
      }
      delete this.data[id];
      return this.viewModel.onDelete(id);
    };

    Notes.prototype.push = function(note) {
      if (this.data[note.id] == null) {
        this.count++;
      }
      this.data[note.id] = note;
      return this.viewModel.onUpdate(note);
    };

    Notes.prototype.create = function(note) {
      if (note.id == null) {
        while (true) {
          note.id = parseInt(Math.random() * 100000);
          if (this.data[note.id] == null) {
            break;
          }
        }
      }
      this.push(note);
      return this.pusher.send("client-new-note-in-progress", note);
    };

    Notes.prototype.commitCreate = function(note) {
      return this.server.create(note);
    };

    Notes.prototype.updateSize = function(note) {
      this.push(note);
      return this.pusher.send("client-update-note-size", note);
    };

    Notes.prototype.updatePos = function(note) {
      this.push(note);
      return this.pusher.send("client-update-note-position", note);
    };

    Notes.prototype.commitUpdate = function(note) {
      return this.server.update(note);
    };

    Notes.prototype["delete"] = function(id) {
      this.pusher.send("client-delete-note-in-progress", this.data[id]);
      return this.pop(id);
    };

    Notes.prototype.commitDelete = function(id) {
      return this.server["delete"](id);
    };

    return Notes;

  })();

  if (typeof window !== "undefined" && window !== null) {
    window.Notes = Notes;
  } else {
    module.exports = Notes;
  }

}).call(this);
