// Generated by CoffeeScript 1.6.1
(function() {
  var Interactivity,
    _this = this;

  Interactivity = (function() {

    function Interactivity() {
      var _this = this;
      this.stop_realtime_update = function(notes, note, event) {
        return Interactivity.prototype.stop_realtime_update.apply(_this, arguments);
      };
      this.start_realtime_size_update = function(notes, note, event) {
        return Interactivity.prototype.start_realtime_size_update.apply(_this, arguments);
      };
      this.start_realtime_pos_update = function(notes, note, event) {
        return Interactivity.prototype.start_realtime_pos_update.apply(_this, arguments);
      };
      this.activate_note = function(notes, note) {
        return Interactivity.prototype.activate_note.apply(_this, arguments);
      };
      this.stop_realtime_update_for_create = function(note, event) {
        return Interactivity.prototype.stop_realtime_update_for_create.apply(_this, arguments);
      };
      this.start_realtime_update_for_create = function(notes, comments, note, event) {
        return Interactivity.prototype.start_realtime_update_for_create.apply(_this, arguments);
      };
    }

    Interactivity.prototype.start_realtime_update_for_create = function(notes, comments, note, event) {
      return this.interval_timer = setInterval(function() {
        var et, helper, offset;
        helper = $("div.ui-selectable-helper");
        et = $(".ui-selectable");
        offset = et.offset();
        note.width = parseInt(helper.css('width'));
        note.height = parseInt(helper.css('height'));
        note.top = parseInt(helper.css('top')) - parseInt(offset.top) + parseInt(et.scrollTop());
        note.left = parseInt(helper.css('left')) - parseInt(offset.left);
        notes.create({
          "id": note.id,
          "width": note.width,
          "height": note.height,
          "top": note.top,
          "left": note.left,
          "comment": "New note by " + $('#userdata').data('current-user-email')
        });
        return comments.create({
          id: note.id,
          text: notes.get(note.id).comment
        });
      }, 200);
    };

    Interactivity.prototype.stop_realtime_update_for_create = function(note, event) {
      return clearInterval(this.interval_timer);
    };

    Interactivity.prototype.activate_note = function(notes, note) {
      var self;
      self = this;
      note.draggable({
        start: function(event) {
          return self.start_realtime_pos_update(notes, $(this), event);
        },
        stop: function(event) {
          return self.stop_realtime_update(notes, $(this), event);
        }
      });
      note.resizable({
        start: function(event) {
          return self.start_realtime_size_update(notes, $(this), event);
        },
        stop: function(event) {
          return self.stop_realtime_update(notes, $(this), event);
        }
      });
      return note.bind({
        mouseenter: function() {
          return $(this).find('a.delete-note').clearQueue().fadeIn(100);
        },
        mouseleave: function() {
          return $(this).find('a.delete-note').clearQueue().fadeOut(100);
        }
      });
    };

    Interactivity.prototype.start_realtime_pos_update = function(notes, note, event) {
      var _this = this;
      note = $(note);
      return this.interval_timer = setInterval(function() {
        return notes.updatePos(_this.build_note_object(notes, note));
      }, 200);
    };

    Interactivity.prototype.start_realtime_size_update = function(notes, note, event) {
      var _this = this;
      note = $(note);
      return this.interval_timer = setInterval(function() {
        return notes.updateSize(_this.build_note_object(notes, note));
      }, 200);
    };

    Interactivity.prototype.stop_realtime_update = function(notes, note, event) {
      var noteObj;
      clearInterval(this.interval_timer);
      noteObj = this.build_note_object(notes, note);
      if (!note.hasClass('note-new')) {
        return notes.commitUpdate(noteObj);
      }
    };

    Interactivity.prototype.build_note_object = function(notes, obj) {
      var extension, note;
      note = notes.get(parseInt(obj.data('id')));
      extension = {
        "top": parseInt(obj.css('top')),
        "left": parseInt(obj.css('left')),
        "width": parseInt(obj.css('width')),
        "height": parseInt(obj.css('height'))
      };
      return _.extend(note, extension);
    };

    return Interactivity;

  })();

  window.Interactivity = Interactivity;

}).call(this);
