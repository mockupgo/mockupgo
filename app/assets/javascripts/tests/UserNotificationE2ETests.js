// Generated by CoffeeScript 1.4.0
(function() {
  var config, testConfig;

  if (typeof window !== "undefined" && window !== null) {
    return;
  }

  config = require('config');

  testConfig = require('testConfig');

  describe('user notifications end to end tests', function() {
    var check;
    check = function(triggerFunc, count) {
      runs(function() {
        return triggerFunc();
      });
      waitsFor(function() {
        return $('.user-notification').size() === count;
      }, 'notification to appear', testConfig.durations.maxWaitForEvent);
      return waitsFor(function() {
        return $('.user-notification').size() === 0;
      }, 'notification to hide', config.durations.notification + 100);
    };
    beforeEach(function() {
      return browser().navigateTo('../../app/index.html');
    });
    it('should exist html code with class ".user-notification" in count of 1', function() {
      runs(function() {
        var viewModel;
        viewModel = new UserNotificationViewModel();
        viewModel.update([
          {
            email: "user@mail.tt"
          }
        ]);
        return setTimeout(function() {
          return viewModel.update([]);
        }, config.durations.notification);
      });
      waitsFor(function() {
        return $('.user-notification').size() === 1;
      }, 'notification to appear', testConfig.durations.maxWaitForEvent);
      return waitsFor(function() {
        return $('.user-notification').size() === 0;
      }, 'notification to hide', config.durations.notification + testConfig.durations.maxWaitForEvent);
    });
    return it('should exist html code with class ".user-notification" in count of 1 / 2 / 1 / 0', function() {
      runs(function() {
        var user1, user2, viewModel, _ref;
        viewModel = new UserNotificationViewModel();
        _ref = ["user1@gmail.com", "user2@gmail.com"], user1 = _ref[0], user2 = _ref[1];
        viewModel.update([
          {
            email: user1
          }
        ]);
        setTimeout(function() {
          return viewModel.update([
            {
              email: user1
            }, {
              email: user2
            }
          ]);
        }, config.durations.notification / 2);
        setTimeout(function() {
          return viewModel.update([
            {
              email: user2
            }
          ]);
        }, config.durations.notification);
        return setTimeout(function() {
          return viewModel.update([]);
        }, config.durations.notification * 3 / 2);
      });
      waitsFor(function() {
        return $('.user-notification').size() === 1;
      }, '1 notification to appear', testConfig.durations.maxWaitForEvent);
      waitsFor(function() {
        return $('.user-notification').size() === 2;
      }, '2 notifications to appear', config.durations.notification / 2 + testConfig.durations.maxWaitForEvent);
      waitsFor(function() {
        return $('.user-notification').size() === 1;
      }, '1 notification to appear, 1 to hide', config.durations.notification + testConfig.durations.maxWaitForEvent);
      return waitsFor(function() {
        return $('.user-notification').size() === 0;
      }, 'all notifications to hide', testConfig.durations.maxWaitForEvent * 3 / 2 + testConfig.durations.maxWaitForEvent);
    });
  });

}).call(this);
