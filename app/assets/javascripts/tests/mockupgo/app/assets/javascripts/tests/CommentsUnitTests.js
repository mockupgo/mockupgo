//@ sourceMappingURL=mockupgo\app\assets\javascripts\tests\mockupgo\app\assets\javascripts\tests\CommentsUnitTests.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Comments, Notes, PusherMock, ServerMock, testConfig, _;

  _ = require('lodash');

  PusherMock = require('../pusherMock');

  ServerMock = require('../serverMock');

  testConfig = require('./testConfig');

  Notes = require('../Notes');

  Comments = require('../Comments');

  describe('comments unit test', function() {
    var fakeViewModel, tempData, tempNotesData;
    fakeViewModel = {
      onUpdate: function() {},
      onUpdateComment: function() {},
      onDelete: function() {}
    };
    tempNotesData = {
      1: {
        id: 1,
        left: 3,
        top: 5,
        width: 100,
        height: 50,
        comment: "first comm"
      },
      2: {
        id: 2,
        left: 0,
        top: 0,
        width: 150,
        height: 40,
        comment: "second comm"
      }
    };
    tempData = {
      1: {
        text: "first comm",
        id: 1
      },
      2: {
        text: "second comm",
        id: 2
      }
    };
    it('should see that someone wrote comment in real time', function() {
      var anotherPusherMock, comments, notes, otherComments, otherNotes, pusherMock, serverMock;
      pusherMock = new PusherMock;
      anotherPusherMock = new PusherMock;
      serverMock = new ServerMock(null);
      notes = new Notes(fakeViewModel, pusherMock, serverMock);
      otherNotes = new Notes(fakeViewModel, anotherPusherMock, serverMock);
      comments = new Comments(fakeViewModel, pusherMock, serverMock, notes);
      otherComments = new Comments(fakeViewModel, anotherPusherMock, serverMock, otherNotes);
      otherComments.subscribe();
      runs(function() {
        comments.create(tempData[1]);
        return anotherPusherMock.send("client-new-note-comment-in-progress", tempData[1]);
      });
      return waitsFor(function() {
        return otherComments.count === 1;
      }, 'another user gets new comment', testConfig.timeouts.response);
    });
    return it('should see comment which was created before some user is logged', function() {
      var anotherPusherMock, comments, notes, otherComments, otherNotes, pusherMock, serverMock;
      pusherMock = new PusherMock;
      anotherPusherMock = new PusherMock;
      serverMock = new ServerMock([pusherMock, anotherPusherMock]);
      notes = new Notes(fakeViewModel, pusherMock, serverMock);
      comments = new Comments(fakeViewModel, pusherMock, serverMock, notes);
      comments.subscribe();
      otherNotes = {};
      otherComments = {};
      runs(function() {
        notes.create(tempData[1]);
        comments.create(tempData[1]);
        return comments.commitCreate(tempData[1].id);
      });
      waitsFor(function() {
        return notes.count === 1 && _.isUndefined(notes.data[1]);
      }, 'new note with new real id generated at server was added', testConfig.timeouts.response);
      runs(function() {
        expect(comments.count).toBe(1);
        otherNotes = new Notes(fakeViewModel, anotherPusherMock, serverMock);
        return otherComments = new Comments(fakeViewModel, anotherPusherMock, serverMock, otherNotes);
      });
      return waitsFor(function() {
        return otherComments.count === 1;
      }, 'another user got earlier created comment when logged', testConfig.timeouts.response);
    });
  });

}).call(this);
